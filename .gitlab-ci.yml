image:
  name: hashicorp/terraform:1.2.6

stages:
  - Test and Lint
  - Build and Push
  - Staging Plan
  - Staging Apply
  - Production Plan
  - Production Apply
  - Destroy

Test and Lint:
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  stage: Test and Lint
  script:
    - apk add --update docker-compose
    - docker-compose run --rm app sh -c "python manage.py wait_for_db && python manage.py test && flake8"
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|production)$/ || $CI_COMMIT_BRANCH =~ /^(master|production)$/'


Validate Terraform:
  stage: Test and Lint
  script:
    - cd deploy/
    - terraform init -backend=false
    - terraform validate
    - terraform fmt -check
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|production)$/ || $CI_COMMIT_BRANCH =~ /^(master|production)$/'

Build and Push:
  stage: Build and Push
  script:
    - echo "Build and Push to ECR"
  rules:
    - if:  '$CI_COMMIT_BRANCH =~ /^(master|production)$/'

Staging Plan:
  stage: Staging Plan
  script:
    - echo "Terrafrom Paln for staging"
  rules: 
    - if: '$CI_COMMIT_BRANCH =~ /^(master|production)$/'

Staging Apply:
  stage: Staging Apply
  script:
    - echo "Terrafrom Apply for staging"
  rules: 
    - if: '$CI_COMMIT_BRANCH =~ /^(master|production)$/'

Production Plan:
  stage: Production Plan
  script:
    - echo "Terrafrom Paln for production"
  rules: 
    - if: '$CI_COMMIT_BRANCH == "production"'

Production Apply:
  stage: Production Apply
  script:
    - echo "Terrafrom Apply for Production"
  rules: 
    - if: '$CI_COMMIT_BRANCH == "production"'

Staging Destroy:
  stage: Destroy
  script:
    - echo "Destroy staging infra"
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(master|production)$/'
    - when: manual

Production Destroy:
  stage: Destroy
  script:
    - echo "Destroy production infra"
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'
    - when: manual


